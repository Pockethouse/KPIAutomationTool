// <auto-generated />
using System;
using EXCELGRAPHING;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EXCELGRAPHING.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EXCELGRAPHING.Models.Bank", b =>
                {
                    b.Property<int>("BankID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BankID");

                    b.ToTable("Banks", (string)null);
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.BankAccount", b =>
                {
                    b.Property<int>("BankAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("BankID")
                        .HasColumnType("int");

                    b.Property<int>("ProviderID")
                        .HasColumnType("int");

                    b.HasKey("BankAccountID");

                    b.HasIndex("BankID");

                    b.HasIndex("ProviderID");

                    b.ToTable("BankAccounts", (string)null);
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.Claim", b =>
                {
                    b.Property<int>("ClaimID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("ClaimAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("ClaimDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PolicyID")
                        .HasColumnType("int");

                    b.Property<int>("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ClaimID");

                    b.HasIndex("PolicyID");

                    b.HasIndex("ProviderID");

                    b.ToTable("Claims", (string)null);
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.Distribution", b =>
                {
                    b.Property<int>("DistributionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("DistributionAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("DistributionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<int>("ProviderID")
                        .HasColumnType("int");

                    b.HasKey("DistributionID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("ProviderID");

                    b.ToTable("Distribution", (string)null);
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.InsuranceCompany", b =>
                {
                    b.Property<int>("InsuranceCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("InsuranceCompanyID");

                    b.ToTable("InsuranceCompanies", (string)null);
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClaimID")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaymentMethodID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PaymentID");

                    b.HasIndex("ClaimID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PaymentMethodID");

                    b.ToTable("PaymentMethods", (string)null);
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.Policy", b =>
                {
                    b.Property<int>("PolicyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("CoverageAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("InsuranceCompanyID")
                        .HasColumnType("int");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PolicyholderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("PolicyID");

                    b.HasIndex("InsuranceCompanyID");

                    b.HasIndex("PolicyholderID");

                    b.ToTable("Policies", (string)null);
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.PolicyHolder", b =>
                {
                    b.Property<int>("PolicyholderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PolicyholderID");

                    b.ToTable("Policyholders", (string)null);
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.Provider", b =>
                {
                    b.Property<int>("ProviderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProviderID");

                    b.ToTable("Providers", (string)null);
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TransactionID");

                    b.HasIndex("PaymentID");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserID");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.BankAccount", b =>
                {
                    b.HasOne("EXCELGRAPHING.Models.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXCELGRAPHING.Models.Provider", "Provider")
                        .WithMany("BankAccounts")
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.Claim", b =>
                {
                    b.HasOne("EXCELGRAPHING.Models.Policy", "Policy")
                        .WithMany("Claims")
                        .HasForeignKey("PolicyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXCELGRAPHING.Models.Provider", "Provider")
                        .WithMany("Claims")
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.Distribution", b =>
                {
                    b.HasOne("EXCELGRAPHING.Models.Payment", "Payment")
                        .WithMany("Distributions")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXCELGRAPHING.Models.Provider", "Provider")
                        .WithMany("Distributions")
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.Payment", b =>
                {
                    b.HasOne("EXCELGRAPHING.Models.Claim", "Claim")
                        .WithMany("Payments")
                        .HasForeignKey("ClaimID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXCELGRAPHING.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.Policy", b =>
                {
                    b.HasOne("EXCELGRAPHING.Models.InsuranceCompany", "InsuranceCompany")
                        .WithMany("Policies")
                        .HasForeignKey("InsuranceCompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXCELGRAPHING.Models.PolicyHolder", "Policyholder")
                        .WithMany("Policies")
                        .HasForeignKey("PolicyholderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsuranceCompany");

                    b.Navigation("Policyholder");
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.Transaction", b =>
                {
                    b.HasOne("EXCELGRAPHING.Models.Payment", "Payment")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.Claim", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.InsuranceCompany", b =>
                {
                    b.Navigation("Policies");
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.Payment", b =>
                {
                    b.Navigation("Distributions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.Policy", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.PolicyHolder", b =>
                {
                    b.Navigation("Policies");
                });

            modelBuilder.Entity("EXCELGRAPHING.Models.Provider", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("Claims");

                    b.Navigation("Distributions");
                });
#pragma warning restore 612, 618
        }
    }
}
